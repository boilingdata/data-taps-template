AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Data Tap template (BoilingData)

Parameters:
  dataTapOutputS3Bucket:
    Type: String
    Description: >-
      The Data Taps output S3 Bucket name, not the ARN. The S3 Express Bucket ARNs must 
      contain region, whilst normal S3 Buckets do not. Cross AZ traffic costs $0.02/GB,
      so try to avoid that, if you use S3 Express buckets (or run the Lambda in single subnet 
      that matches the AZ of the S3 Express bucket)
      TODO:
       - S3 Express (Directory) Buckets are single AZ and thus if pushing data to them,
         allow having AZ specific S3 Express Buckets.
       - Make the Lambda find out its private IP address and give it a list of subnets along
         with corresponding AZ. Lambda can then detect its AZ and choose the right S3 Express
         bucket.
  dataTapOutputS3BucketArn:
    Type: String
    Description: >-
      ARN of the output S3 Bucket. Data Tap will output data onto this S3 (Express) Bucket. 
      Remember to create S3 VPC gateway for both s3 and s3express, otherwise traffic flows 
      through AWS public S3 API endpoint!
  dataTapOutputS3BucketSrftimePrefix:
    Type: String
    Description: >-
      S3 Bucket prefix for the output data as strftime date time string.
    Default: datataps/demoDataTap/year=%Y/month=%m/day=%d/hour=%H/
  bdTapTokenSecret:
    Type: String
    Description: >-
      Use bdcli to get your Data Tap master secret: "bdcli account tap-master-secret". You need
      to register to BoilingData, which you can do with the bdcli as well. See the GitHub repo:
      https://github.com/boilingdata/boilingdata-bdcli
  ownerBoilinDataEmail:
    Type: String
    Description: >-
      Your BoilingData account email address. BoilingData account is used with Data Taps too.
      This template adds this email address into the Lambda environment variable (AUTHORIZED_USERS).
      This way you're able to write to the Data Tap URL. See the "taptoken" package.json command on
      https://github.com/boilingdata/data-taps-template/ repository (this). You need to get the 
      taptoken and add it as HTTP Header when you HTTP POST data to the Data Tap (Lambda Function) URL.
      See the package.json command "test" as an example curl command with needed HTTP headers.
  reservedConcurrency:
    Type: Number
    Description: >-
      This defines capped scale out limit in terms of AWS Lambda maximum concurrency. If you remove
      the AWS Lambda concurrency limit, it will scale out as much as needed and as much as you have
      available concurrency limit available at the time. AWS account default maximum concurrency is
      1000. So, if you remove the concurrency that's the max the Data Tap will scale out to if needed
      and no other Lambda functions are running. Thus, be sure to either set concurrency limit or avoid
      situation in prodcution where Data Taps eat up the whole concurrency pool and start to throttle
      itself and potentially other Lambda functions on the same AWS Account and Region. See AWS 
      documentation about Lambda Function URLs on how the concurrency limit affects maximum RPS etc.
      https://docs.aws.amazon.com/lambda/latest/dg/urls-configuration.html#urls-throttling
    Default: 10
  memorySize:
    Type: Number
    Description: >-
      AWS Lambda memory size. It direcly affects network throughput from the Tap to S3. More memory
      mean higher network throughput but also more expensive compute time. This parameters is important
      since it affects how much data a shutting down Lambda container can flush to S3. Doubling the 
      memory makes it roughly twice faster at sending data to S3, thus having roughly the same cost,
      at least on small Lambda memory levels.
    Default: 128
    MinValue: 128
    MaxValue: 10240
  thresholdBytes:
    Type: Number
    Description: >-
      Data Taps will flush data to S3 once the thresholds are reached. The bigger Lambda you have
      the more you can buffer while ensuring that the 2000ms time to send the remaining data to S3 when
      Lambda container is shutting down. Please note that DuckDB will convert the data to zstd compressed
      Parquet which in size is many times smaller than the incoming newline delimited JSON. This aspect
      makes Data Taps especially useful with tiniest AWS Lambda functions and thus very cost efficient.
    Default: 10485760
  thresholdMs:
    Type: Number
    Description: >-
      Data Taps will flush/sync data to S3 once a threshold is reached (e.g. data volume or time passed 
      since last sync)
    Default: 60000
  sgId:
    Type: String
    Description: >-
      Security group for the AWS Lambda in the VPC.
  subnet1:
    Type: String
    Description: >-
      Subnets for the Data Tap Lambda. For HA, use a subnet per AZ within the same AZ.
  subnet2:
    Type: String
    Description: >-
      Subnets for the Data Tap Lambda. For HA, use a subnet per AZ within the same AZ.
  subnet3:
    Type: String
    Description: >-
      Subnets for the Data Tap Lambda. For HA, use a subnet per AZ within the same AZ.
  

Resources:
  dataTapExtension:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content: extension.zip
      LayerName: dataTapsExtension

  demoDataTapLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/datataps/${AWS::StackName}-demo-data-tap
      RetentionInDays: 3

  demoDataTap:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: data-tap.zip
      MemorySize: !Ref memorySize
      Timeout: 5
      Handler: bdtap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Layers:
        - !Ref dataTapExtension
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
        LogGroup: !Ref demoDataTapLogGroup
        SystemLogLevel: INFO
      Environment:
        Variables:
          MODEL_NAME: default
          DUCKDB_SQL: >-
            COPY ( SELECT CAST(filename[17:27] AS INT32) AS __bd_ts, *
            EXCLUDE(filename) FROM read_json_auto('/tmp/json_files/*.json',
            ignore_errors=true, auto_detect=true, format=newline_delimited,
            filename=true, maximum_depth=2, union_by_name=true)) TO '%s' WITH (
            FORMAT 'Parquet', COMPRESSION 'ZSTD' )
          TAP_NAME: demoDataTap
          BD_TAP_TOKEN_SECRET: !Ref bdTapTokenSecret
          S3_BUCKET: !Ref dataTapOutputS3Bucket
          S3_STRFTIME_PREFIX: !Ref dataTapOutputS3BucketSrftimePrefix
          # S3_ENDPOINT: !Sub s3.${AWS::Region}.amazonaws.com
          AUTHORIZED_USERS: !Ref ownerBoilinDataEmail
          RESOURCE_OWNER_EMAIL: !Ref ownerBoilinDataEmail
          RESOURCE_OWNER_USERNAME: !Ref ownerBoilinDataEmail
          THRESHOLD_BYTES: !Ref thresholdBytes
          THRESHOLD_MS: !Ref thresholdMs
      EventInvokeConfig:
        DestinationConfig: {}
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowCredentials: true
          AllowHeaders:
            - '*'
          AllowMethods:
            - POST
          AllowOrigins:
            - '*'
          ExposeHeaders:
            - '*'
      Policies:
        - Statement:
            - Action:
                - ec2:Describe*
                - ec2:CreateNetworkInterface
                - ec2:AttachNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
              Resource:
                - '*'
              Effect: Allow
            - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource:
                - '*'
              Effect: Allow
            - Action:
                - s3:*
              Resource:
                - !Ref dataTapOutputS3BucketArn
                - !Sub ${dataTapOutputS3BucketArn}*
              Effect: Allow
      ReservedConcurrentExecutions: !Ref reservedConcurrency
      VpcConfig:
        SecurityGroupIds:
          - !Ref sgId
        SubnetIds:
          - !Ref subnet1
          - !Ref subnet2
          - !Ref subnet3
        Ipv6AllowedForDualStack: false
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

Outputs:
  dataTapURL:
    Value: !GetAtt demoDataTapUrl.FunctionUrl
    Description: >-
      The AWS Lambda Function URL for the demoDataTap. You can send your data into this URL.
      As an example to send data.json with curl:

      export TAP_URL="<theOutputValueFromBelow>"

      export TAP_TOKEN=`bdcli account tap-client-token --disable-spinner | jq -r .bdTapToken`

      curl --no-keepalive -H "Connection: close" -H "Content-Type:application/x-ndjson" -H "x-bd-authorization: ${TAP_TOKEN}" --data-binary @../data.json ${TAP_URL}
          
